#include <iostream>
using namespace std;


class node{
public:
    int data;
    node* next;

//Constructor to set a new node
    node(int data){
        this->data=data;
        this->next;
    }
};//We are just creating nodes containing some value and a pointer whose value we would assign later


// Insert a new node at head (this new node will be the head)
void insertAtHead(node* &head, int value){

    // create a new node
    node* temp=new node(value); //now, temp is a node
    temp->next=head; //Giving it the reference to the previous head
    head=temp;//Setting it as the new head
}

void insertAtTail(node* &tail, int value){

    node* temp= new node(value);
    temp->next=NULL;
    tail->next=temp;
    tail=temp;//Setting it as the new tail
}


void insertAfterNode(node* &n, int value){
   
    node* temp = new node(value);
    temp->next=n->next;
    n->next=temp;
}

void insertAtIndex(node* &head, node* &tail, int value, int position){

    node*NewNode=new node(value);
    
    node*temp=head;

//If we have to add before the head
    if(position==0){
        insertAtHead(head, value);
    }
    
    
    else{

//This works well for middle and tail insertion

    int index=0;
    while(index<position-1){
    
        index++;
        temp=temp->next;
    }

    NewNode->next=temp->next;
    temp->next=NewNode;
//Don't forget to update the tail if the node has to be added at the last
    if(NewNode->next=NULL){tail=NewNode;}
    
    }
}


void printLL(node* &head){
    node* temp = head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}




int main(){cout<<endl;


// Allocation in heap
    node* node1 = new node(1);
    node* node2 = new node(2);
    node* node3 = new node(3);
    node* node4 = new node(4);

    node1->next=node2;
    node2->next=node3;
    node3->next=node4;
    node4->next=NULL;

    node* head=node1;
    node* tail=node4;

    insertAtHead(head,-1);

    insertAtTail(tail, 5);

    insertAfterNode(node3, 9);
    
    insertAtIndex(head, tail, 10, 0);

    printLL(head);

cout<<endl;

    cout<<head->data<<" "<<tail->data;



cout<<endl;return 0;}
